global
    log stdout local0

    maxconn 200
    ssl-server-verify none

    tune.maxrewrite 16384
    tune.bufsize 32768
    lua-load /usr/share/haproxy/auth-request.lua

defaults
    log                     global
    timeout http-request    50s
    timeout queue           50s
    timeout connect         50s
    timeout client          50s
    timeout server          100s
    timeout check           50s

    option httplog
    option http-keep-alive
    option forwardfor

backend ldap_backend
    mode http
    server flask 127.0.0.1:5000 check

backend mgmt_backend
    mode http
    server Archiver-MGMT 10.0.6.61:11995

backend mgmt_auth_backend
    mode http
    http-request set-header X-Ldap-Starttls      "false"
    http-request set-header X-Ldap-Group-BaseDN  "ou=epics-archiver,ou=groups,dc=lnls,dc=br"
    http-request set-header X-Ldap-Group-CNs     "cn=archiver-admins"
    http-request set-header X-Ldap-Realm         "EPICS Archiver - MGMT Actions"
    

    http-request lua.auth-request ldap_backend /ldap/Archiver

    # If not success, request again the authentication
    http-request use-service lua.auth-basic-service if !{ var(txn.auth_response_successful) -m bool }
    http-request deny if !{ var(txn.auth_response_successful) -m bool }

    server Archiver-MGMT 10.0.6.61:11995 check


# --------------------------------------------------------
backend olog_token_generate_backend
    mode http
    http-request set-header X-Ldap-Starttls      "false"
    http-request set-header X-Ldap-Group-BaseDN  "ou=olog,ou=groups,dc=lnls,dc=br"
    http-request set-header X-Ldap-Group-CNs     "olog-admins,olog-logbooks,olog-logs,olog-tags"
    http-request set-header X-Ldap-Realm         "Olog - LDAP Proxy"

    http-request set-uri /ldap/token/generate
    server flask 127.0.0.1:5000 check


backend olog_backend
    mode http
    
    http-request lua.auth-request ldap_backend /ldap/token/authorization if { req.cook(TOKEN) -m found }
    #http-request deny if !{ var(txn.auth_response_successful) -m bool } { req.cook(TOKEN) -m found }
    http-request set-header Authorization var(txn.auth_response_authorization) if { var(txn.auth_response_successful) }
    server olog_server 0.0.0.0:8181 check

frontend proxy-https
    bind *:80
    mode http

    # Generate TOKEN cookie if header Authorization: Basic exists
    use_backend olog_token_generate_backend if { hdr(Authorization) -m beg Basic } { path -i -m beg /Olog }

    acl olog path -i -m beg /Olog
    use_backend olog_backend if olog
    
#use_backend archiver_auth_backend if { path -i -m beg /Archiver }

